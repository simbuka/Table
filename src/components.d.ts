/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  EventEmitter,
} from '@stencil/core';
import {
  IOnSortChange,
} from './components/table-header-cell/IOnSortChange';
import {
  IOnPageChange,
} from './components/table-pagination/IOnPageChange';


export namespace Components {

  interface SmbTableBodyCell {
    /**
    * Tells if to put default padding of cell
    */
    'noPadding': boolean;
  }
  interface SmbTableBodyCellAttributes extends StencilHTMLAttributes {
    /**
    * Tells if to put default padding of cell
    */
    'noPadding'?: boolean;
  }

  interface SmbTableBodyRow {}
  interface SmbTableBodyRowAttributes extends StencilHTMLAttributes {}

  interface SmbTableHeaderCell {
    /**
    * Cell unique key. Required if `sort` is used
    */
    'key': number;
    /**
    * Sort type
    */
    'sort': 'none' | 'asc' | 'desc' | '';
  }
  interface SmbTableHeaderCellAttributes extends StencilHTMLAttributes {
    /**
    * Cell unique key. Required if `sort` is used
    */
    'key'?: number;
    /**
    * Emitted when sorting changes
    */
    'onOnSortChange'?: (event: CustomEvent<IOnSortChange>) => void;
    /**
    * Sort type
    */
    'sort'?: 'none' | 'asc' | 'desc' | '';
  }

  interface SmbTableHeaderRow {}
  interface SmbTableHeaderRowAttributes extends StencilHTMLAttributes {}

  interface SmbTablePagination {
    /**
    * Tells if next page button should be active
    */
    'activeNext': boolean;
    /**
    * Tells if previous page button should be active
    */
    'activePrevious': boolean;
    /**
    * Text for total results found
    */
    'foundText': string;
  }
  interface SmbTablePaginationAttributes extends StencilHTMLAttributes {
    /**
    * Tells if next page button should be active
    */
    'activeNext'?: boolean;
    /**
    * Tells if previous page button should be active
    */
    'activePrevious'?: boolean;
    /**
    * Text for total results found
    */
    'foundText': string;
    /**
    * Emitted when clicked on previous or next page button
    */
    'onOnPageChange'?: (event: CustomEvent<IOnPageChange>) => void;
  }

  interface SmbTable {
    /**
    * Amount of rows are shown in table body
    */
    'bodyRowCount': number;
    /**
    * Body row height
    */
    'bodyRowHeight': number;
    /**
    * Tells if table is loading
    */
    'loading': boolean;
    /**
    * Tells if to show no results overlay
    */
    'noResults': boolean;
  }
  interface SmbTableAttributes extends StencilHTMLAttributes {
    /**
    * Amount of rows are shown in table body
    */
    'bodyRowCount'?: number;
    /**
    * Body row height
    */
    'bodyRowHeight'?: number;
    /**
    * Tells if table is loading
    */
    'loading'?: boolean;
    /**
    * Tells if to show no results overlay
    */
    'noResults'?: boolean;
  }
}

declare global {
  interface StencilElementInterfaces {
    'SmbTableBodyCell': Components.SmbTableBodyCell;
    'SmbTableBodyRow': Components.SmbTableBodyRow;
    'SmbTableHeaderCell': Components.SmbTableHeaderCell;
    'SmbTableHeaderRow': Components.SmbTableHeaderRow;
    'SmbTablePagination': Components.SmbTablePagination;
    'SmbTable': Components.SmbTable;
  }

  interface StencilIntrinsicElements {
    'smb-table-body-cell': Components.SmbTableBodyCellAttributes;
    'smb-table-body-row': Components.SmbTableBodyRowAttributes;
    'smb-table-header-cell': Components.SmbTableHeaderCellAttributes;
    'smb-table-header-row': Components.SmbTableHeaderRowAttributes;
    'smb-table-pagination': Components.SmbTablePaginationAttributes;
    'smb-table': Components.SmbTableAttributes;
  }


  interface HTMLSmbTableBodyCellElement extends Components.SmbTableBodyCell, HTMLStencilElement {}
  var HTMLSmbTableBodyCellElement: {
    prototype: HTMLSmbTableBodyCellElement;
    new (): HTMLSmbTableBodyCellElement;
  };

  interface HTMLSmbTableBodyRowElement extends Components.SmbTableBodyRow, HTMLStencilElement {}
  var HTMLSmbTableBodyRowElement: {
    prototype: HTMLSmbTableBodyRowElement;
    new (): HTMLSmbTableBodyRowElement;
  };

  interface HTMLSmbTableHeaderCellElement extends Components.SmbTableHeaderCell, HTMLStencilElement {}
  var HTMLSmbTableHeaderCellElement: {
    prototype: HTMLSmbTableHeaderCellElement;
    new (): HTMLSmbTableHeaderCellElement;
  };

  interface HTMLSmbTableHeaderRowElement extends Components.SmbTableHeaderRow, HTMLStencilElement {}
  var HTMLSmbTableHeaderRowElement: {
    prototype: HTMLSmbTableHeaderRowElement;
    new (): HTMLSmbTableHeaderRowElement;
  };

  interface HTMLSmbTablePaginationElement extends Components.SmbTablePagination, HTMLStencilElement {}
  var HTMLSmbTablePaginationElement: {
    prototype: HTMLSmbTablePaginationElement;
    new (): HTMLSmbTablePaginationElement;
  };

  interface HTMLSmbTableElement extends Components.SmbTable, HTMLStencilElement {}
  var HTMLSmbTableElement: {
    prototype: HTMLSmbTableElement;
    new (): HTMLSmbTableElement;
  };

  interface HTMLElementTagNameMap {
    'smb-table-body-cell': HTMLSmbTableBodyCellElement
    'smb-table-body-row': HTMLSmbTableBodyRowElement
    'smb-table-header-cell': HTMLSmbTableHeaderCellElement
    'smb-table-header-row': HTMLSmbTableHeaderRowElement
    'smb-table-pagination': HTMLSmbTablePaginationElement
    'smb-table': HTMLSmbTableElement
  }

  interface ElementTagNameMap {
    'smb-table-body-cell': HTMLSmbTableBodyCellElement;
    'smb-table-body-row': HTMLSmbTableBodyRowElement;
    'smb-table-header-cell': HTMLSmbTableHeaderCellElement;
    'smb-table-header-row': HTMLSmbTableHeaderRowElement;
    'smb-table-pagination': HTMLSmbTablePaginationElement;
    'smb-table': HTMLSmbTableElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
