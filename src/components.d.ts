/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  EventEmitter,
} from '@stencil/core';
import {
  IOnSortChange,
} from './components/table-header-cell/IOnSortChange';
import {
  IOnPageChange,
} from './components/table-pagination/IOnPageChange';


export namespace Components {

  interface SflTableBodyCell {}
  interface SflTableBodyCellAttributes extends StencilHTMLAttributes {}

  interface SflTableBodyRow {}
  interface SflTableBodyRowAttributes extends StencilHTMLAttributes {}

  interface SflTableHeaderCell {
    /**
    * Cell unique key. Required if `sort` is used
    */
    'key': number;
    /**
    * Sort type
    */
    'sort': '' | 'none' | 'asc' | 'desc';
  }
  interface SflTableHeaderCellAttributes extends StencilHTMLAttributes {
    /**
    * Cell unique key. Required if `sort` is used
    */
    'key'?: number;
    /**
    * Emitted when sorting changes
    */
    'onOnSortChange'?: (event: CustomEvent<IOnSortChange>) => void;
    /**
    * Sort type
    */
    'sort'?: '' | 'none' | 'asc' | 'desc';
  }

  interface SflTableHeaderRow {}
  interface SflTableHeaderRowAttributes extends StencilHTMLAttributes {}

  interface SflTablePagination {
    /**
    * Tells if next page button should be active
    */
    'activeNext': boolean;
    /**
    * Tells if previous page button should be active
    */
    'activePrevious': boolean;
    /**
    * Text for total results found
    */
    'foundText': string;
  }
  interface SflTablePaginationAttributes extends StencilHTMLAttributes {
    /**
    * Tells if next page button should be active
    */
    'activeNext'?: boolean;
    /**
    * Tells if previous page button should be active
    */
    'activePrevious'?: boolean;
    /**
    * Text for total results found
    */
    'foundText': string;
    /**
    * Emitted when clicked on previous or next page button
    */
    'onOnPageChange'?: (event: CustomEvent<IOnPageChange>) => void;
  }

  interface SflTable {
    /**
    * Amount of rows are shown in table body
    */
    'bodyRowCount': number;
    /**
    * Body row height
    */
    'bodyRowHeight': number;
    /**
    * Tells if table is loading
    */
    'loading': boolean;
    /**
    * Tells if to show no results overlay
    */
    'noResults': boolean;
  }
  interface SflTableAttributes extends StencilHTMLAttributes {
    /**
    * Amount of rows are shown in table body
    */
    'bodyRowCount'?: number;
    /**
    * Body row height
    */
    'bodyRowHeight'?: number;
    /**
    * Tells if table is loading
    */
    'loading'?: boolean;
    /**
    * Tells if to show no results overlay
    */
    'noResults'?: boolean;
  }
}

declare global {
  interface StencilElementInterfaces {
    'SflTableBodyCell': Components.SflTableBodyCell;
    'SflTableBodyRow': Components.SflTableBodyRow;
    'SflTableHeaderCell': Components.SflTableHeaderCell;
    'SflTableHeaderRow': Components.SflTableHeaderRow;
    'SflTablePagination': Components.SflTablePagination;
    'SflTable': Components.SflTable;
  }

  interface StencilIntrinsicElements {
    'sfl-table-body-cell': Components.SflTableBodyCellAttributes;
    'sfl-table-body-row': Components.SflTableBodyRowAttributes;
    'sfl-table-header-cell': Components.SflTableHeaderCellAttributes;
    'sfl-table-header-row': Components.SflTableHeaderRowAttributes;
    'sfl-table-pagination': Components.SflTablePaginationAttributes;
    'sfl-table': Components.SflTableAttributes;
  }


  interface HTMLSflTableBodyCellElement extends Components.SflTableBodyCell, HTMLStencilElement {}
  var HTMLSflTableBodyCellElement: {
    prototype: HTMLSflTableBodyCellElement;
    new (): HTMLSflTableBodyCellElement;
  };

  interface HTMLSflTableBodyRowElement extends Components.SflTableBodyRow, HTMLStencilElement {}
  var HTMLSflTableBodyRowElement: {
    prototype: HTMLSflTableBodyRowElement;
    new (): HTMLSflTableBodyRowElement;
  };

  interface HTMLSflTableHeaderCellElement extends Components.SflTableHeaderCell, HTMLStencilElement {}
  var HTMLSflTableHeaderCellElement: {
    prototype: HTMLSflTableHeaderCellElement;
    new (): HTMLSflTableHeaderCellElement;
  };

  interface HTMLSflTableHeaderRowElement extends Components.SflTableHeaderRow, HTMLStencilElement {}
  var HTMLSflTableHeaderRowElement: {
    prototype: HTMLSflTableHeaderRowElement;
    new (): HTMLSflTableHeaderRowElement;
  };

  interface HTMLSflTablePaginationElement extends Components.SflTablePagination, HTMLStencilElement {}
  var HTMLSflTablePaginationElement: {
    prototype: HTMLSflTablePaginationElement;
    new (): HTMLSflTablePaginationElement;
  };

  interface HTMLSflTableElement extends Components.SflTable, HTMLStencilElement {}
  var HTMLSflTableElement: {
    prototype: HTMLSflTableElement;
    new (): HTMLSflTableElement;
  };

  interface HTMLElementTagNameMap {
    'sfl-table-body-cell': HTMLSflTableBodyCellElement
    'sfl-table-body-row': HTMLSflTableBodyRowElement
    'sfl-table-header-cell': HTMLSflTableHeaderCellElement
    'sfl-table-header-row': HTMLSflTableHeaderRowElement
    'sfl-table-pagination': HTMLSflTablePaginationElement
    'sfl-table': HTMLSflTableElement
  }

  interface ElementTagNameMap {
    'sfl-table-body-cell': HTMLSflTableBodyCellElement;
    'sfl-table-body-row': HTMLSflTableBodyRowElement;
    'sfl-table-header-cell': HTMLSflTableHeaderCellElement;
    'sfl-table-header-row': HTMLSflTableHeaderRowElement;
    'sfl-table-pagination': HTMLSflTablePaginationElement;
    'sfl-table': HTMLSflTableElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
