/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  IOnPageChange,
} from './components/table-pagination/IOnPageChange';
import {
  ISortType,
} from './components/th/ISortType';
import {
  IOnSortChange,
} from './components/th/IOnSortChange';

export namespace Components {
  interface SmbTable {}
  interface SmbTablePagination {
    /**
    * Tells if next page button should be active
    */
    'activeNext': boolean;
    /**
    * Tells if previous page button should be active
    */
    'activePrevious': boolean;
    /**
    * Label for next button
    */
    'labelNext': string;
    /**
    * Label for previous button
    */
    'labelPrevious': string;
  }
  interface SmbTbody {
    /**
    * Tells if to show loader
    */
    'loading': boolean;
    /**
    * Tells if to show no results overlay
    */
    'noResults': boolean;
    /**
    * No results text
    */
    'noResultsContent': any;
    /**
    * Height for no results overlay
    */
    'overlayHeight': number;
  }
  interface SmbTd {
    /**
    * Tells if to add default spacing of cell
    */
    'noSpacing': boolean;
    /**
    * Tells if to shrink to child's width
    */
    'shrink': boolean;
    /**
    * Tells if to add ellipsis if the content does not fit the container
    */
    'truncate': boolean;
  }
  interface SmbTh {
    /**
    * Cell unique key. Required if `sort` is used
    */
    'key': number;
    /**
    * Tells if to add default spacing of cell
    */
    'noSpacing': boolean;
    /**
    * Tells if to shrink to child's width
    */
    'shrink': boolean;
    /**
    * Sort type. Leave empty to disable sort
    */
    'sort': ISortType;
    /**
    * Tells if to add ellipsis if the content does not fit the container
    */
    'truncate': boolean;
  }
  interface SmbThead {}
  interface SmbTr {}
}

declare global {


  interface HTMLSmbTableElement extends Components.SmbTable, HTMLStencilElement {}
  var HTMLSmbTableElement: {
    prototype: HTMLSmbTableElement;
    new (): HTMLSmbTableElement;
  };

  interface HTMLSmbTablePaginationElement extends Components.SmbTablePagination, HTMLStencilElement {}
  var HTMLSmbTablePaginationElement: {
    prototype: HTMLSmbTablePaginationElement;
    new (): HTMLSmbTablePaginationElement;
  };

  interface HTMLSmbTbodyElement extends Components.SmbTbody, HTMLStencilElement {}
  var HTMLSmbTbodyElement: {
    prototype: HTMLSmbTbodyElement;
    new (): HTMLSmbTbodyElement;
  };

  interface HTMLSmbTdElement extends Components.SmbTd, HTMLStencilElement {}
  var HTMLSmbTdElement: {
    prototype: HTMLSmbTdElement;
    new (): HTMLSmbTdElement;
  };

  interface HTMLSmbThElement extends Components.SmbTh, HTMLStencilElement {}
  var HTMLSmbThElement: {
    prototype: HTMLSmbThElement;
    new (): HTMLSmbThElement;
  };

  interface HTMLSmbTheadElement extends Components.SmbThead, HTMLStencilElement {}
  var HTMLSmbTheadElement: {
    prototype: HTMLSmbTheadElement;
    new (): HTMLSmbTheadElement;
  };

  interface HTMLSmbTrElement extends Components.SmbTr, HTMLStencilElement {}
  var HTMLSmbTrElement: {
    prototype: HTMLSmbTrElement;
    new (): HTMLSmbTrElement;
  };
  interface HTMLElementTagNameMap {
    'smb-table': HTMLSmbTableElement;
    'smb-table-pagination': HTMLSmbTablePaginationElement;
    'smb-tbody': HTMLSmbTbodyElement;
    'smb-td': HTMLSmbTdElement;
    'smb-th': HTMLSmbThElement;
    'smb-thead': HTMLSmbTheadElement;
    'smb-tr': HTMLSmbTrElement;
  }
}

declare namespace LocalJSX {
  interface SmbTable extends JSXBase.HTMLAttributes<HTMLSmbTableElement> {}
  interface SmbTablePagination extends JSXBase.HTMLAttributes<HTMLSmbTablePaginationElement> {
    /**
    * Tells if next page button should be active
    */
    'activeNext'?: boolean;
    /**
    * Tells if previous page button should be active
    */
    'activePrevious'?: boolean;
    /**
    * Label for next button
    */
    'labelNext'?: string;
    /**
    * Label for previous button
    */
    'labelPrevious'?: string;
    /**
    * Emitted when clicked on previous or next page button
    */
    'onOnPageChange'?: (event: CustomEvent<IOnPageChange>) => void;
  }
  interface SmbTbody extends JSXBase.HTMLAttributes<HTMLSmbTbodyElement> {
    /**
    * Tells if to show loader
    */
    'loading'?: boolean;
    /**
    * Tells if to show no results overlay
    */
    'noResults'?: boolean;
    /**
    * No results text
    */
    'noResultsContent'?: any;
    /**
    * Height for no results overlay
    */
    'overlayHeight'?: number;
  }
  interface SmbTd extends JSXBase.HTMLAttributes<HTMLSmbTdElement> {
    /**
    * Tells if to add default spacing of cell
    */
    'noSpacing'?: boolean;
    /**
    * Tells if to shrink to child's width
    */
    'shrink'?: boolean;
    /**
    * Tells if to add ellipsis if the content does not fit the container
    */
    'truncate'?: boolean;
  }
  interface SmbTh extends JSXBase.HTMLAttributes<HTMLSmbThElement> {
    /**
    * Cell unique key. Required if `sort` is used
    */
    'key': number;
    /**
    * Tells if to add default spacing of cell
    */
    'noSpacing'?: boolean;
    /**
    * Emitted when sorting changes
    */
    'onOnSortChange'?: (event: CustomEvent<IOnSortChange>) => void;
    /**
    * Tells if to shrink to child's width
    */
    'shrink'?: boolean;
    /**
    * Sort type. Leave empty to disable sort
    */
    'sort'?: ISortType;
    /**
    * Tells if to add ellipsis if the content does not fit the container
    */
    'truncate'?: boolean;
  }
  interface SmbThead extends JSXBase.HTMLAttributes<HTMLSmbTheadElement> {}
  interface SmbTr extends JSXBase.HTMLAttributes<HTMLSmbTrElement> {}

  interface IntrinsicElements {
    'smb-table': SmbTable;
    'smb-table-pagination': SmbTablePagination;
    'smb-tbody': SmbTbody;
    'smb-td': SmbTd;
    'smb-th': SmbTh;
    'smb-thead': SmbThead;
    'smb-tr': SmbTr;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


